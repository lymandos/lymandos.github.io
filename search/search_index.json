{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lymando's \u00b6 Williams \u00b6 Evernote Mail Toolkit \u00b6 Random Password What's my public IP DNS Analyse Aiqicha Dict Cloud \u00b6 Aliyun Agent Aliyun HuaweiCloud AWS Open Source \u00b6 CNCF Landscape Kubernetes Istio EventMesh Ingress \u00b6 Emissary-ingress Ingress-nginx Message \u00b6 Emqx Kafka DevOps \u00b6 Git GitOps GitLab Harbor Jenkins Argo SaltStack Terraform Configuration \u00b6 Apollo Auth \u00b6 OpenLDAP Storage \u00b6 Ceph MinIO Longhorn Container \u00b6 Docker Repository \u00b6 Docker Hub Security \u00b6 Xray SSL Labs Polaris Monitoring \u00b6 Prometheus Grafana Loki Seq CDC \u00b6 Kafka Debezium Database \u00b6 MySQL-5.7 MariaDB Postgresql SQLServer MongoDB Redis ClickHouse Programming \u00b6 Golang Python","title":"Webstack"},{"location":"#welcome-to-lymandos","text":"","title":"Welcome to Lymando's"},{"location":"#williams","text":"Evernote Mail","title":"Williams"},{"location":"#toolkit","text":"Random Password What's my public IP DNS Analyse Aiqicha Dict","title":"Toolkit"},{"location":"#cloud","text":"Aliyun Agent Aliyun HuaweiCloud AWS","title":"Cloud"},{"location":"#open-source","text":"CNCF Landscape Kubernetes Istio EventMesh","title":"Open Source"},{"location":"#ingress","text":"Emissary-ingress Ingress-nginx","title":"Ingress"},{"location":"#message","text":"Emqx Kafka","title":"Message"},{"location":"#devops","text":"Git GitOps GitLab Harbor Jenkins Argo SaltStack Terraform","title":"DevOps"},{"location":"#configuration","text":"Apollo","title":"Configuration"},{"location":"#auth","text":"OpenLDAP","title":"Auth"},{"location":"#storage","text":"Ceph MinIO Longhorn","title":"Storage"},{"location":"#container","text":"Docker","title":"Container"},{"location":"#repository","text":"Docker Hub","title":"Repository"},{"location":"#security","text":"Xray SSL Labs Polaris","title":"Security"},{"location":"#monitoring","text":"Prometheus Grafana Loki Seq","title":"Monitoring"},{"location":"#cdc","text":"Kafka Debezium","title":"CDC"},{"location":"#database","text":"MySQL-5.7 MariaDB Postgresql SQLServer MongoDB Redis ClickHouse","title":"Database"},{"location":"#programming","text":"Golang Python","title":"Programming"},{"location":"database/cdc/","text":"Architecture \u00b6 Prerequisites \u00b6 1.Mysql Enable mysql binlog. \u00b6 server-id=<server-id, or ignore this item> log_bin=mysql-bin binlog_format=row binlog_row_image=full expire_logs_days=10 2.MongoDB 3.Kafka Source \u00b6 register source: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/source-mysql-mariadb.storage.json Sink \u00b6 register sink: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/sink-mongodb-mariadb.storage.account-address.json How do i operate registered connectors? list all registered connectors: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X GET -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors delete particular connector: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X DELETE -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/<connector-name> Reference \u00b6 1. Enable mysql binlog 2. Debezium architecture","title":"Change data capture"},{"location":"database/cdc/#architecture","text":"","title":"Architecture"},{"location":"database/cdc/#prerequisites","text":"1.Mysql","title":"Prerequisites"},{"location":"database/cdc/#enable-mysql-binlog","text":"server-id=<server-id, or ignore this item> log_bin=mysql-bin binlog_format=row binlog_row_image=full expire_logs_days=10 2.MongoDB 3.Kafka","title":"Enable mysql binlog."},{"location":"database/cdc/#source","text":"register source: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/source-mysql-mariadb.storage.json","title":"Source"},{"location":"database/cdc/#sink","text":"register sink: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/sink-mongodb-mariadb.storage.account-address.json How do i operate registered connectors? list all registered connectors: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X GET -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors delete particular connector: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X DELETE -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/<connector-name>","title":"Sink"},{"location":"database/cdc/#reference","text":"1. Enable mysql binlog 2. Debezium architecture","title":"Reference"},{"location":"kubernetes/containerruntimes/","text":"Containerd \u00b6 1.Prerequisites cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter # Setup required sysctl params, these persist across reboots. cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF # Apply sysctl params without reboot sudo sysctl --system 2.Install the containerd.io package from the official Docker repositories. sudo yum install -y yum-utils #sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo sudo sed -i 's|download.docker.com|mirrors.ustc.edu.cn/docker-ce|' /etc/yum.repos.d/docker-ce.repo sudo yum makecache fast sudo yum install -y containerd.io 3.Configure containerd. sudo mkdir -p /etc/containerd containerd config default | sudo tee /etc/containerd/config.toml sudo sed -i '/\\[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options\\]/a\\ SystemdCgroup = true' /etc/containerd/config.toml sudo sed -i \"s|k8s.gcr.io|registry.aliyuncs.com/google_containers|g\" /etc/containerd/config.toml sudo sed -i \"s|registry-1.docker.io|registry.aliyuncs.com|g\" /etc/containerd/config.toml How can I change the default location? sudo mkdir -p /data/containerd sudo sed -i 's|/var/lib/containerd|/data/containerd|g' /etc/containerd/config.toml 4.Configure containerd sock. sudo tee /etc/crictl.yaml <<EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: false EOF 5.Configure containerd auto start. cat <<EOF | sudo tee /usr/lib/systemd/system/containerd.service [Unit] Description=containerd container runtime Documentation=https://containerd.io After=network.target [Service] ExecStartPre=-/sbin/modprobe overlay ExecStart=/usr/bin/containerd Delegate=yes KillMode=process [Install] WantedBy=multi-user.target EOF sudo systemctl enable containerd sudo systemctl daemon-reload sudo systemctl restart containerd sudo systemctl status containerd CRI-O \u00b6 TODO Docker \u00b6 Kubernetes is deprecating Docker as a container runtime after v1.20. Dockershim Deprecation FAQ 1.Install docker engine on each of k8s nodes. 2.Configure the docker daemon. sudo mkdir /etc/docker cat <<EOF | sudo tee /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } EOF 1.How can I speed up download images? /etc/docker/daemon.json: \"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"], 2.How can I change the default location for Docker images? shell: sudo mkdir -p <desired path> /etc/docker/daemon.json: \"data-root\": \"<desired path>\", 3.Restart Docker and enable on boot. sudo systemctl enable docker sudo systemctl daemon-reload sudo systemctl restart docker Reference \u00b6 1. Install Docker Engine 2. Kubernetes Container Runtimes","title":"Container runtimes"},{"location":"kubernetes/containerruntimes/#containerd","text":"1.Prerequisites cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter # Setup required sysctl params, these persist across reboots. cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF # Apply sysctl params without reboot sudo sysctl --system 2.Install the containerd.io package from the official Docker repositories. sudo yum install -y yum-utils #sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo sudo sed -i 's|download.docker.com|mirrors.ustc.edu.cn/docker-ce|' /etc/yum.repos.d/docker-ce.repo sudo yum makecache fast sudo yum install -y containerd.io 3.Configure containerd. sudo mkdir -p /etc/containerd containerd config default | sudo tee /etc/containerd/config.toml sudo sed -i '/\\[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options\\]/a\\ SystemdCgroup = true' /etc/containerd/config.toml sudo sed -i \"s|k8s.gcr.io|registry.aliyuncs.com/google_containers|g\" /etc/containerd/config.toml sudo sed -i \"s|registry-1.docker.io|registry.aliyuncs.com|g\" /etc/containerd/config.toml How can I change the default location? sudo mkdir -p /data/containerd sudo sed -i 's|/var/lib/containerd|/data/containerd|g' /etc/containerd/config.toml 4.Configure containerd sock. sudo tee /etc/crictl.yaml <<EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: false EOF 5.Configure containerd auto start. cat <<EOF | sudo tee /usr/lib/systemd/system/containerd.service [Unit] Description=containerd container runtime Documentation=https://containerd.io After=network.target [Service] ExecStartPre=-/sbin/modprobe overlay ExecStart=/usr/bin/containerd Delegate=yes KillMode=process [Install] WantedBy=multi-user.target EOF sudo systemctl enable containerd sudo systemctl daemon-reload sudo systemctl restart containerd sudo systemctl status containerd","title":"Containerd"},{"location":"kubernetes/containerruntimes/#cri-o","text":"TODO","title":"CRI-O"},{"location":"kubernetes/containerruntimes/#docker","text":"Kubernetes is deprecating Docker as a container runtime after v1.20. Dockershim Deprecation FAQ 1.Install docker engine on each of k8s nodes. 2.Configure the docker daemon. sudo mkdir /etc/docker cat <<EOF | sudo tee /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } EOF 1.How can I speed up download images? /etc/docker/daemon.json: \"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"], 2.How can I change the default location for Docker images? shell: sudo mkdir -p <desired path> /etc/docker/daemon.json: \"data-root\": \"<desired path>\", 3.Restart Docker and enable on boot. sudo systemctl enable docker sudo systemctl daemon-reload sudo systemctl restart docker","title":"Docker"},{"location":"kubernetes/containerruntimes/#reference","text":"1. Install Docker Engine 2. Kubernetes Container Runtimes","title":"Reference"},{"location":"miscellaneous/snowflake/","text":"How can i address snowflake clock moved backwards issue? shell as root: crontab -e 0 1 * * * systemctl start chronyd.service > /dev/null 0 3 * * * systemctl stop chronyd.service > /dev/null","title":"Snowflake"}]}