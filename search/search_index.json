{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lymando's \u00b6 Williams \u00b6 Evernote Mail Credly Zlibrary GitMind Yinxiang Career \u00b6 Insight Careerizma Toolkit \u00b6 Grammarly Random Password What's my public IP DNS Analyse Aiqicha Dict Crontab guru Speedtest Nginxconfig Linux Packages List Cloud \u00b6 Aliyun Agent Aliyun HuaweiCloud AWS Superedge Open Source \u00b6 CNCF Landscape CNCF Radar Kubernetes Istio EventMesh Karmada Fundamental \u00b6 Cobbler Ingress \u00b6 Emissary-ingress Ingress-nginx Ingress-nginx configuration Nginx doc CNI \u00b6 Cilium Calico Flannel Message \u00b6 Emqx Kafka RabbitMQ DevOps \u00b6 DevStream Git GitOps GitLab Harbor Nexus Argo CD Argo Rollouts Helmfile Jenkins X Tekton Flux Ansible Terraform / Gruntwork Kubevela Configuration \u00b6 Apollo Auth \u00b6 OpenLDAP OAuth2 OpenID Connect Storage \u00b6 Rook Ceph MinIO Longhorn CubeFS Container \u00b6 Containers Docker / Docker Compose Buildpacks Buildah Podman Cri-o Containerd / Nerdctl Repository \u00b6 Docker Hub Security \u00b6 CVE / CVE Details Acme Mozilla Security Guidelines Modernizing HTTPS TLS Observatory SSL Labs SSL Config Generator Xray Polaris Kics Kube-bench OPA / Gatekeeper Kyverno OWASP Monitoring \u00b6 Zabbix Prometheus Thanos Grafana Loki Seq Keptn Logging Guidelines HPA \u00b6 keda Watermark \u00b6 Imgproxy Chaos \u00b6 ChaosMesh CDC \u00b6 Kafka Debezium Flink / Flink CDC Database \u00b6 TiDB Vitess Postgresql MySQL MariaDB Oracle SQLServer MongoDB Redis ClickHouse Redash Programming \u00b6 ASP.NET Core Golang Python Experimental \u00b6 Kubernetes-in-kubernetes Airport \u00b6 NodeFree FFQ Network \u00b6 OpenVPN Geek \u00b6 Major Hayden Picture \u00b6 Unsplash Pixabay Wallhaven Wallpaper Abyss Bing-wallpaper PPT \u00b6 Iconpark 100font Fontspace Emoji","title":"Webstack"},{"location":"#welcome-to-lymandos","text":"","title":"Welcome to Lymando's"},{"location":"#williams","text":"Evernote Mail Credly Zlibrary GitMind Yinxiang","title":"Williams"},{"location":"#career","text":"Insight Careerizma","title":"Career"},{"location":"#toolkit","text":"Grammarly Random Password What's my public IP DNS Analyse Aiqicha Dict Crontab guru Speedtest Nginxconfig Linux Packages List","title":"Toolkit"},{"location":"#cloud","text":"Aliyun Agent Aliyun HuaweiCloud AWS Superedge","title":"Cloud"},{"location":"#open-source","text":"CNCF Landscape CNCF Radar Kubernetes Istio EventMesh Karmada","title":"Open Source"},{"location":"#fundamental","text":"Cobbler","title":"Fundamental"},{"location":"#ingress","text":"Emissary-ingress Ingress-nginx Ingress-nginx configuration Nginx doc","title":"Ingress"},{"location":"#cni","text":"Cilium Calico Flannel","title":"CNI"},{"location":"#message","text":"Emqx Kafka RabbitMQ","title":"Message"},{"location":"#devops","text":"DevStream Git GitOps GitLab Harbor Nexus Argo CD Argo Rollouts Helmfile Jenkins X Tekton Flux Ansible Terraform / Gruntwork Kubevela","title":"DevOps"},{"location":"#configuration","text":"Apollo","title":"Configuration"},{"location":"#auth","text":"OpenLDAP OAuth2 OpenID Connect","title":"Auth"},{"location":"#storage","text":"Rook Ceph MinIO Longhorn CubeFS","title":"Storage"},{"location":"#container","text":"Containers Docker / Docker Compose Buildpacks Buildah Podman Cri-o Containerd / Nerdctl","title":"Container"},{"location":"#repository","text":"Docker Hub","title":"Repository"},{"location":"#security","text":"CVE / CVE Details Acme Mozilla Security Guidelines Modernizing HTTPS TLS Observatory SSL Labs SSL Config Generator Xray Polaris Kics Kube-bench OPA / Gatekeeper Kyverno OWASP","title":"Security"},{"location":"#monitoring","text":"Zabbix Prometheus Thanos Grafana Loki Seq Keptn Logging Guidelines","title":"Monitoring"},{"location":"#hpa","text":"keda","title":"HPA"},{"location":"#watermark","text":"Imgproxy","title":"Watermark"},{"location":"#chaos","text":"ChaosMesh","title":"Chaos"},{"location":"#cdc","text":"Kafka Debezium Flink / Flink CDC","title":"CDC"},{"location":"#database","text":"TiDB Vitess Postgresql MySQL MariaDB Oracle SQLServer MongoDB Redis ClickHouse Redash","title":"Database"},{"location":"#programming","text":"ASP.NET Core Golang Python","title":"Programming"},{"location":"#experimental","text":"Kubernetes-in-kubernetes","title":"Experimental"},{"location":"#airport","text":"NodeFree FFQ","title":"Airport"},{"location":"#network","text":"OpenVPN","title":"Network"},{"location":"#geek","text":"Major Hayden","title":"Geek"},{"location":"#picture","text":"Unsplash Pixabay Wallhaven Wallpaper Abyss Bing-wallpaper","title":"Picture"},{"location":"#ppt","text":"Iconpark 100font Fontspace Emoji","title":"PPT"},{"location":"miscellaneous/","text":"Snowflake \u00b6 1.How can I address the snowflake clock moved backward issue? # crontab -e 0 1 * * * systemctl start chronyd.service > /dev/null 0 3 * * * systemctl stop chronyd.service > /dev/null ETCD \u00b6 1.Backup It is not necessary to stop static pods (kube-apiserver etc.) before backup ectd. # ETCDCTL_API=3 etcdctl \\ --cert=/etc/kubernetes/pki/etcd/server.crt \\ --key=/etc/kubernetes/pki/etcd/server.key \\ --cacert=/etc/kubernetes/pki/etcd/ca.crt \\ snapshot save /tmp/etcd-backup.db 2.Restore stop static pods (kube-apiserver etc.) before restoring ectd. you can use crictl ps to confirm. step1: stop static pods. # mv /etc/kubernetes/manifests/*.yaml /etc/kubernetes/ step2: wait and make sure all static pods have been deleted (crictl ps). step3: execute restore command. pay attention to parameter --data-dir # ETCDCTL_API=3 etcdctl \\ --cert=/etc/kubernetes/pki/etcd/server.crt \\ --key=/etc/kubernetes/pki/etcd/server.key \\ --cacert=/etc/kubernetes/pki/etcd/ca.crt \\ snapshot restore --data-dir=/var/lib/etcd-backup /tmp/etcd-backup.db step4: modify hostPath to the restored path. # vi /etc/kubernetes/etcd.yaml volumes: - hostPath: path: /etc/kubernetes/pki/etcd type: DirectoryOrCreate name: etcd-certs - hostPath: path: /var/lib/etcd-backup type: DirectoryOrCreate name: etcd-data step5: restore static pods # mv /etc/kubernetes/*.yaml /etc/kubernetes/manifests/","title":"Miscellaneous"},{"location":"miscellaneous/#snowflake","text":"1.How can I address the snowflake clock moved backward issue? # crontab -e 0 1 * * * systemctl start chronyd.service > /dev/null 0 3 * * * systemctl stop chronyd.service > /dev/null","title":"Snowflake"},{"location":"miscellaneous/#etcd","text":"1.Backup It is not necessary to stop static pods (kube-apiserver etc.) before backup ectd. # ETCDCTL_API=3 etcdctl \\ --cert=/etc/kubernetes/pki/etcd/server.crt \\ --key=/etc/kubernetes/pki/etcd/server.key \\ --cacert=/etc/kubernetes/pki/etcd/ca.crt \\ snapshot save /tmp/etcd-backup.db 2.Restore stop static pods (kube-apiserver etc.) before restoring ectd. you can use crictl ps to confirm. step1: stop static pods. # mv /etc/kubernetes/manifests/*.yaml /etc/kubernetes/ step2: wait and make sure all static pods have been deleted (crictl ps). step3: execute restore command. pay attention to parameter --data-dir # ETCDCTL_API=3 etcdctl \\ --cert=/etc/kubernetes/pki/etcd/server.crt \\ --key=/etc/kubernetes/pki/etcd/server.key \\ --cacert=/etc/kubernetes/pki/etcd/ca.crt \\ snapshot restore --data-dir=/var/lib/etcd-backup /tmp/etcd-backup.db step4: modify hostPath to the restored path. # vi /etc/kubernetes/etcd.yaml volumes: - hostPath: path: /etc/kubernetes/pki/etcd type: DirectoryOrCreate name: etcd-certs - hostPath: path: /var/lib/etcd-backup type: DirectoryOrCreate name: etcd-data step5: restore static pods # mv /etc/kubernetes/*.yaml /etc/kubernetes/manifests/","title":"ETCD"},{"location":"database/cdc/","text":"Architecture \u00b6 Prerequisites \u00b6 1.Mysql Enable MySQL binlog. \u00b6 server-id=<server-id, or ignore this item> log_bin=mysql-bin binlog_format=row binlog_row_image=full expire_logs_days=10 2.MongoDB 3.Kafka Source \u00b6 register source: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/source-mysql-mariadb.storage.json Sink \u00b6 register sink: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/sink-mongodb-mariadb.storage.account-address.json How can I operate registered connectors? list all registered connectors: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X GET -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors delete particular connector: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X DELETE -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/<connector-name> Reference \u00b6 1. Enable mysql binlog 2. Debezium architecture","title":"Change data capture"},{"location":"database/cdc/#architecture","text":"","title":"Architecture"},{"location":"database/cdc/#prerequisites","text":"1.Mysql","title":"Prerequisites"},{"location":"database/cdc/#enable-mysql-binlog","text":"server-id=<server-id, or ignore this item> log_bin=mysql-bin binlog_format=row binlog_row_image=full expire_logs_days=10 2.MongoDB 3.Kafka","title":"Enable MySQL binlog."},{"location":"database/cdc/#source","text":"register source: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/source-mysql-mariadb.storage.json","title":"Source"},{"location":"database/cdc/#sink","text":"register sink: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/ -d @/controller/sink-mongodb-mariadb.storage.account-address.json How can I operate registered connectors? list all registered connectors: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X GET -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors delete particular connector: PODNAME=`kubectl -n common get pod -l app=debezium-controller | awk 'NR>1{print $1}'` kubectl -n common exec -it $PODNAME -- curl -X DELETE -H \"Accept:application/json\" -H \"Content-Type:application/json\" http://debezium:8083/connectors/<connector-name>","title":"Sink"},{"location":"database/cdc/#reference","text":"1. Enable mysql binlog 2. Debezium architecture","title":"Reference"},{"location":"database/sqlserver/","text":"Backup strategies \u00b6 1.Set database recovery mode properly. 2.Full backup and log backup. 3.Shrink log file size after backup each time. 4.Check storage available size, delete obsoleted backup files. How can I recover the database which deleted the log file? \u00b6 1.Back up the data files via copy. 2.Retrieve the database files paths, including the filenames. 3.Rename data filename. 4.Create the same name and path database. 5.Stop SQL server service. 6.Delete the new data file. 7.Rename the original data file. 8.Startup SQL Server service. 9.Execute SQL as below. USE MASTER GO ALTER DATABASE dbname SET SINGLE_USER WITH ROLLBACK IMMEDIATE ALTER DATABASE dbname SET EMERGENCY DBCC CHECKDB('dbname',REPAIR_ALLOW_DATA_LOSS) ALTER DATABASE dbname SET MULTI_USER; GO","title":"SQL Server"},{"location":"database/sqlserver/#backup-strategies","text":"1.Set database recovery mode properly. 2.Full backup and log backup. 3.Shrink log file size after backup each time. 4.Check storage available size, delete obsoleted backup files.","title":"Backup strategies"},{"location":"database/sqlserver/#how-can-i-recover-the-database-which-deleted-the-log-file","text":"1.Back up the data files via copy. 2.Retrieve the database files paths, including the filenames. 3.Rename data filename. 4.Create the same name and path database. 5.Stop SQL server service. 6.Delete the new data file. 7.Rename the original data file. 8.Startup SQL Server service. 9.Execute SQL as below. USE MASTER GO ALTER DATABASE dbname SET SINGLE_USER WITH ROLLBACK IMMEDIATE ALTER DATABASE dbname SET EMERGENCY DBCC CHECKDB('dbname',REPAIR_ALLOW_DATA_LOSS) ALTER DATABASE dbname SET MULTI_USER; GO","title":"How can I recover the database which deleted the log file?"},{"location":"kubernetes/containerruntimes/","text":"CRI-O on Ubuntu 20.04 \u00b6 TODO Containerd \u00b6 1.Prerequisites cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter # Setup required sysctl params, these persist across reboots. cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF # Apply sysctl params without reboot sudo sysctl --system 2.Install the containerd.io package from the official Docker repositories. sudo yum install -y yum-utils #sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo sudo sed -i 's|download.docker.com|mirrors.ustc.edu.cn/docker-ce|' /etc/yum.repos.d/docker-ce.repo sudo yum makecache fast sudo yum install -y containerd.io 3.Configure containerd. sudo mkdir -p /etc/containerd containerd config default | sudo tee /etc/containerd/config.toml sudo sed -i '/\\[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options\\]/a\\ SystemdCgroup = true' /etc/containerd/config.toml sudo sed -i \"s|k8s.gcr.io|registry.aliyuncs.com/google_containers|g\" /etc/containerd/config.toml sudo sed -i \"s|registry-1.docker.io|registry.aliyuncs.com|g\" /etc/containerd/config.toml How can I change the default location? sudo mkdir -p /data/containerd sudo sed -i 's|/var/lib/containerd|/data/containerd|g' /etc/containerd/config.toml 4.Configure containerd sock. sudo tee /etc/crictl.yaml <<EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: false EOF 5.Configure containerd auto start. cat <<EOF | sudo tee /usr/lib/systemd/system/containerd.service [Unit] Description=containerd container runtime Documentation=https://containerd.io After=network.target [Service] ExecStartPre=-/sbin/modprobe overlay ExecStart=/usr/bin/containerd Delegate=yes KillMode=process [Install] WantedBy=multi-user.target EOF sudo systemctl enable containerd sudo systemctl daemon-reload sudo systemctl restart containerd sudo systemctl status containerd Make sure the right path of containerd. ExecStart=/usr/bin/containerd Docker \u00b6 Kubernetes is deprecating Docker as a container runtime after v1.20. Dockershim Deprecation FAQ 1.Install docker engine on each of k8s nodes. 2.Configure the docker daemon. sudo mkdir /etc/docker cat <<EOF | sudo tee /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } EOF 1.How can I speed up downloading images? /etc/docker/daemon.json: \"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"], 2.How can I change the default location for Docker images? shell: sudo mkdir -p <desired path> /etc/docker/daemon.json: \"data-root\": \"<desired path>\", 3.Restart Docker and enable it on boot. sudo systemctl enable docker sudo systemctl daemon-reload sudo systemctl restart docker Reference \u00b6 1. Install Docker Engine 2. Kubernetes Container Runtimes 3. Crictl Configuration 4. Containerd.service","title":"Container runtimes"},{"location":"kubernetes/containerruntimes/#cri-o-on-ubuntu-2004","text":"TODO","title":"CRI-O on Ubuntu 20.04"},{"location":"kubernetes/containerruntimes/#containerd","text":"1.Prerequisites cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter # Setup required sysctl params, these persist across reboots. cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF # Apply sysctl params without reboot sudo sysctl --system 2.Install the containerd.io package from the official Docker repositories. sudo yum install -y yum-utils #sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo sudo sed -i 's|download.docker.com|mirrors.ustc.edu.cn/docker-ce|' /etc/yum.repos.d/docker-ce.repo sudo yum makecache fast sudo yum install -y containerd.io 3.Configure containerd. sudo mkdir -p /etc/containerd containerd config default | sudo tee /etc/containerd/config.toml sudo sed -i '/\\[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options\\]/a\\ SystemdCgroup = true' /etc/containerd/config.toml sudo sed -i \"s|k8s.gcr.io|registry.aliyuncs.com/google_containers|g\" /etc/containerd/config.toml sudo sed -i \"s|registry-1.docker.io|registry.aliyuncs.com|g\" /etc/containerd/config.toml How can I change the default location? sudo mkdir -p /data/containerd sudo sed -i 's|/var/lib/containerd|/data/containerd|g' /etc/containerd/config.toml 4.Configure containerd sock. sudo tee /etc/crictl.yaml <<EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: false EOF 5.Configure containerd auto start. cat <<EOF | sudo tee /usr/lib/systemd/system/containerd.service [Unit] Description=containerd container runtime Documentation=https://containerd.io After=network.target [Service] ExecStartPre=-/sbin/modprobe overlay ExecStart=/usr/bin/containerd Delegate=yes KillMode=process [Install] WantedBy=multi-user.target EOF sudo systemctl enable containerd sudo systemctl daemon-reload sudo systemctl restart containerd sudo systemctl status containerd Make sure the right path of containerd. ExecStart=/usr/bin/containerd","title":"Containerd"},{"location":"kubernetes/containerruntimes/#docker","text":"Kubernetes is deprecating Docker as a container runtime after v1.20. Dockershim Deprecation FAQ 1.Install docker engine on each of k8s nodes. 2.Configure the docker daemon. sudo mkdir /etc/docker cat <<EOF | sudo tee /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" }, \"storage-driver\": \"overlay2\" } EOF 1.How can I speed up downloading images? /etc/docker/daemon.json: \"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"], 2.How can I change the default location for Docker images? shell: sudo mkdir -p <desired path> /etc/docker/daemon.json: \"data-root\": \"<desired path>\", 3.Restart Docker and enable it on boot. sudo systemctl enable docker sudo systemctl daemon-reload sudo systemctl restart docker","title":"Docker"},{"location":"kubernetes/containerruntimes/#reference","text":"1. Install Docker Engine 2. Kubernetes Container Runtimes 3. Crictl Configuration 4. Containerd.service","title":"Reference"},{"location":"kubernetes/podman/","text":"Install \u00b6 1.CentOS 7 and later. sudo yum -y install podman 2.Debian 11 (Bullseye) and later. sudo apt-get -y install podman 3.Ubuntu 20.10 and later. sudo apt-get -y update sudo apt-get -y install podman Podman in ubuntu 20.10 and later. On Ubuntu 20.10 and newer, we highly recommend you use Buildah, Podman and Skopeo ONLY from EITHER the Kubic repo OR the official Ubuntu repos. Mixing and matching may lead to unpredictable situations including installation conflicts. Usage \u00b6 TODO Reference \u00b6 1. Podman Github 2. Podman Installation Instructions 3. Podman in a Rootless environment 4. Podman Commonds","title":"Podman"},{"location":"kubernetes/podman/#install","text":"1.CentOS 7 and later. sudo yum -y install podman 2.Debian 11 (Bullseye) and later. sudo apt-get -y install podman 3.Ubuntu 20.10 and later. sudo apt-get -y update sudo apt-get -y install podman Podman in ubuntu 20.10 and later. On Ubuntu 20.10 and newer, we highly recommend you use Buildah, Podman and Skopeo ONLY from EITHER the Kubic repo OR the official Ubuntu repos. Mixing and matching may lead to unpredictable situations including installation conflicts.","title":"Install"},{"location":"kubernetes/podman/#usage","text":"TODO","title":"Usage"},{"location":"kubernetes/podman/#reference","text":"1. Podman Github 2. Podman Installation Instructions 3. Podman in a Rootless environment 4. Podman Commonds","title":"Reference"}]}